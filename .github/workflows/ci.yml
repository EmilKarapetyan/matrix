name: CI Build and Test Matrix Project

on:
  push:
    branches: ["copy_2"]
  pull_request:
    branches: ["copy_2"]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Step 2: Install dependencies on Ubuntu
      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          if ! command -v cmake &> /dev/null; then
            echo "CMake not found. Installing..."
            sudo apt-get install -y cmake
          else:
            cmake --version
          fi

          if ! command -v gcc &> /dev/null; then
            echo "GCC not found. Installing..."
            sudo apt-get install -y build-essential
          else:
            gcc --version
          fi

          if ! command -v g++ &> /dev/null; then
            echo "G++ not found. Installing..."
            sudo apt-get install -y build-essential
          else:
            g++ --version
          fi

      # Step 3: Install dependencies on Windows
      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Install CMake if not installed
          if (-not (Get-Command cmake -ErrorAction SilentlyContinue)) {
            Write-Host "CMake not found. Installing via Chocolatey..."
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          } else {
            cmake --version
          }

          # Install MinGW if GCC and G++ are missing
          if (-not (Get-Command gcc -ErrorAction SilentlyContinue)) {
            Write-Host "GCC not found. Installing MinGW..."
            choco install mingw
          } else {
            gcc --version
          }

          if (-not (Get-Command g++ -ErrorAction SilentlyContinue)) {
            Write-Host "G++ not found. Installing MinGW..."
            choco install mingw
          } else {
            g++ --version
          }

      # Step 4: Configure the build with CMake
      - name: Configure with CMake on Linux
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B build

      - name: Configure with CMake on Windows
        if: runner.os == 'Windows'
        run: |
          cmake -S . -B build -G "MinGW Makefiles"

      # Step 5: Build the project
      - name: Build with CMake on Linux
        if: runner.os == 'Linux'
        run: |
          cmake --build build

      - name: Build with CMake on Windows
        if: runner.os == 'Windows'
        run: |
          cmake --build build

      # Step 6: Run tests and dump output to result.txt (cross-platform)
      - name: Run Tests and Dump Output
        run: |
          if [[ "$RUNNER_OS" == 'Linux' ]]; then
            if [ -f ./build/matrix_lib ]; then
              ./build/matrix_lib > result.txt
            else
              echo "Executable not found. Please check the build."
              exit 1
            fi
          elif [[ "$RUNNER_OS" == 'Windows' ]]; then
            powershell.exe -Command "
            if (Test-Path .\\build\\matrix_lib.exe) {
              .\\build\\matrix_lib.exe | Out-File -FilePath result.txt
            } else {
              Write-Host 'Executable not found. Please check the build.'
              exit 1
            }
            "
          fi
        shell: bash
    
      # Step 7: Verify Test Results and Revert on Failure (Linux)
      - name: Verify Test Results and Revert on Failure - Linux
        if: runner.os == 'Linux'
        run: |
          if grep -q "ALL THE TEST PASSED" result.txt; then
            echo "All tests passed."
          else
            echo "Tests failed."
            
            # Set Git config for GitHub Actions bot
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"
            
            # Stash uncommitted changes to avoid interference
            git stash push -m "Temporary stash before revert"
            
            # Revert the last commit (only files from last commit)
            git revert --no-commit HEAD

            # Commit the reverted changes (only the affected files)
            git commit -m "Revert last commit's changes (only the affected files)"

            # Push the changes back to the 'copy_2' branch
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
            git push origin copy_2
            
            # Apply the stashed changes (if any)
            git stash pop || echo "No changes to apply after revert."
            
            exit 1
          fi

      # Step 8: Verify Test Results and Revert on Failure (Windows)
      - name: Verify Test Results and Revert on Failure - Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Select-String -Path result.txt -Pattern 'ALL THE TEST PASSED')) {
            Write-Host 'Tests failed.'
            
            # Set Git config for GitHub Actions bot
            git config --global user.name 'GitHub Actions Bot'
            git config --global user.email 'actions@github.com'
            
            # Stash uncommitted changes to avoid interference
            git stash push -m 'Temporary stash before revert'
            
            # Revert the last commit (only files from last commit)
            git revert --no-commit HEAD

            # Commit the reverted changes (only the affected files)
            git commit -m 'Revert last commit''s changes (only the affected files)'

            # Push the changes back to the 'copy_2' branch
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
            git push origin copy_2

            # Apply the stashed changes (if any)
            git stash pop || Write-Host 'No changes to apply after revert.'

            exit 1
          } else {
            Write-Host 'All tests passed.'
          }

      # Step 9: Final message for PR (if this is a pull request)
      - name: Tests Passed Successfully
        if: success() && github.event_name == 'pull_request'
        run: echo "Tests passed successfully. Ready to merge into copy_2."
