name: Cross-Platform Validate and Revert on Failure

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  validate:
    name: Build, Test, and Validate (Cross-Platform)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history to allow reverts

      # Step 2: Install dependencies on Ubuntu
      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          if ! command -v cmake &> /dev/null; then
            echo "CMake not found. Installing..."
            sudo apt-get install -y cmake
          else
            cmake --version
          fi

          if ! command -v gcc &> /dev/null; then
            echo "GCC not found. Installing..."
            sudo apt-get install -y gcc g++
          else
            gcc --version
            g++ --version
          fi

      # Step 3: Install dependencies on Windows
      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Get-Command cmake -ErrorAction SilentlyContinue)) {
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          } else {
            cmake --version
          }

          if (-not (Get-Command gcc -ErrorAction SilentlyContinue)) {
            choco install mingw -y
          } else {
            gcc --version
            g++ --version
          }

      # Step 4: Configure the build with CMake
      - name: Configure the build
        run: |
          if [[ "$RUNNER_OS" == 'Linux' ]]; then
            cmake -S . -B build
          elif [[ "$RUNNER_OS" == 'Windows' ]]; then
            cmake -S . -B build -G "MinGW Makefiles"
          fi
        shell: bash

      # Step 5: Build the project
      - name: Build the project
        run: cmake --build build
        shell: bash

      # Step 6: Run tests and capture output
      - name: Run Tests and Capture Output
        run: |
          if [[ "$RUNNER_OS" == 'Linux' ]]; then
            ./build/matrix_lib > result.txt || exit 1
          elif [[ "$RUNNER_OS" == 'Windows' ]]; then
            .\\build\\matrix_lib.exe > result.txt || exit 1
          fi
        shell: bash

      # Step 7: Verify test results
      - name: Verify Test Results
        run: |
          if [[ "$RUNNER_OS" == 'Linux' ]]; then
            if grep -q "ALL THE TEST PASSED" result.txt; then
              echo "All tests passed."
            else
              echo "Tests failed."
              exit 1
            fi
          elif [[ "$RUNNER_OS" == 'Windows' ]]; then
            powershell.exe -Command "
            if (-not (Select-String -Path result.txt -Pattern 'ALL THE TEST PASSED')) {
              Write-Host 'Tests failed.'
              exit 1
            } else {
              Write-Host 'All tests passed.'
            }
            "
          fi
        shell: bash

      # Step 8: Revert commit on failure
      - name: Revert Commit on Failure
        if: failure()
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git reset --hard HEAD # Reset working directory to match the last commit
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" != *"Revert"* ]]; then
            git revert HEAD --no-edit
            git push origin main
          else
            echo "Revert skipped to prevent infinite loop."
          fi
        shell: bash
