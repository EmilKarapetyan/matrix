#include<vector>
#include<iostream>
#include<exception>

template<typename T>
class Matrix {

	public:
		Matrix() :  m_width{0}, m_height{0}, m_matrix{nullptr} {};
		Matrix(size_t width, size_t height, T val=0) : m_width{width}, m_height{height} {
			if (m_width < 0 || m_height < 0) 
				throw std::invalid_argument("Invalid arguments.");

			m_matrix = new T*[m_height];
			for (size_t hIdx = 0; hIdx < m_height; ++hIdx) {
				m_matrix[hIdx] = new T[m_width];
			}

			for (size_t hIdx = 0; hIdx < m_height; ++hIdx) {
				for (size_t wIdx = 0; wIdx <m_width ; ++wIdx) {
					m_matrix[hIdx][wIdx] = val;
				}
			}
		}

		void print() {
			if (m_matrix == nullptr)
				return;
			for (size_t hIdx = 0; hIdx < m_height; ++hIdx) {
				for (size_t wIdx = 0; wIdx <m_width ; ++wIdx) {
					std::cout<< m_matrix[hIdx][wIdx] << " ";
				}
				std::cout<<"\n";
			}
		}
	
	private:
		size_t m_width;
		size_t m_height;
		T** m_matrix;
};
